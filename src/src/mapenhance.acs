//#library "mapenh"
//#import "zcommon.bcs"

//#include "UltDoomEnh.acs"
//#include "Doom2Enh.acs"
//#include "TNTEnh.acs"
//#include "PlutEnh.acs"
//#include "D2RelEnh.acs"

str MapHashList[] =
{
	// Ultimate Doom
	"E1M1_0980E083", "E1M2_03609006", "E1M3_56B0A007", "E1M4_0EC89003", "E1M5_55489009", 
	"E1M6_1CF89004", "E1M7_46789004", "E1M8_51908001", "E1M9_0B309082", "E2M1_51808004", 
	"E2M2_25C0B00C", "E2M3_2548C006", "E2M4_1120800A", "E2M5_0D90900A", "E2M6_40488003", 
	"E2M7_5DC89006", "E2M8_4118C080", "E2M9_46809001", "E3M1_0B58FF81", "E3M2_4100A083", 
	"E3M3_26188086", "E3M4_54B0A084", "E3M5_1880808A", "E3M6_47D8C084", "E3M7_7D00B004", 
	"E3M8_0A00C080", "E3M9_0B50FF81", "E4M1_43809082", "E4M2_4780FF03", "E4M3_46309082", 
	"E4M4_09E09002", "E4M5_7D009002", "E4M6_0980B083", "E4M7_4080C002", "E4M8_4680B081", 
	"E4M9_57B0C002", 
	// Sigil
	"E5M1_7DB88004", "E5M2_16386004", "E5M3_7D68B004", "E5M4_7D78C005", 
	"E5M5_47007003", "E5M6_7D60C003", "E5M7_1638C006", "E5M8_5C707004", "E5M9_1620C084", 
	// Sigil II
	"E6M1_7D02B006", "E6M2_40809007", "E6M3_162C8087", "E6M4_57808004", "E6M5_416CA006", 
	"E6M6_4A808009", "E6M7_40489009", "E6M8_4A387087", "E6M9_1C80A007", 
	// Doom II
	"MAP01_6300E085", "MAP02_21709001", "MAP03_47888001", "MAP04_2BA87003", "MAP05_2B209003", 
	"MAP06_2B488003", "MAP07_5D709001", "MAP08_5A208007", "MAP09_1800A006", "MAP10_0378E012", 
	"MAP11_2570A083", "MAP12_51D09004", "MAP13_0D806008", "MAP14_0E209080", "MAP15_5CB0A00A", 
	"MAP16_47C07004", "MAP17_26C8F703", "MAP18_42C0A084", "MAP19_4108B089", "MAP20_7DD0A087", 
	"MAP21_44C88000", "MAP22_2500C083", "MAP23_51007002", "MAP24_48809004", "MAP25_0A408002", 
	"MAP26_40908004", "MAP27_0D807007", "MAP28_46B0A007", "MAP29_46F88000", "MAP30_5C80A000", 
	"MAP31_46809004", "MAP32_5680A006", 
	// No Rest for the Living (Wadsmoosh)
	"NV_MAP01_5E00C007", "NV_MAP02_5CD0C00C", "NV_MAP03_2510E005", "NV_MAP04_0A64D007", "NV_MAP05_47A0C008", 
	"NV_MAP06_4400E08B", "NV_MAP07_44D0C08B", "NV_MAP08_23A0FF03", "NV_MAP09_2B80B005", 
	// Master Levels for Doom II (Wadsmoosh)
	"ML_MAP01_26009601", "ML_MAP02_0940B404", "ML_MAP03_25008C02", "ML_MAP04_56A0C801", "ML_MAP05_25009681", 
	"ML_MAP06_0980A502", "ML_MAP07_632CCD87", "ML_MAP08_0900CB81", "ML_MAP09_43F0AF05", "ML_MAP10_48409684", 
	"ML_MAP11_12A0FF81", "ML_MAP12_0E009085", "ML_MAP13_0E808001", "ML_MAP14_40A0C082", "ML_MAP15_41A09082", 
	"ML_MAP16_4360FF87", "ML_MAP17_0800FF02", "ML_MAP18_564C6404", "ML_MAP19_4140FF04", "ML_MAP20_0980FF05", 
	"ML_MAP21_5000FF01", 
	// Final Doom: TNT Evilution
	"MAP01_2596FA81", "MAP02_6080AA84", "MAP03_1C77F703", "MAP04_29488C08", "MAP05_10987803", 
	"MAP06_1800FF01", "MAP07_50C09604", "MAP08_25807304", "MAP09_4448AF0B", "MAP10_116E8C05", 
	"MAP11_11C86E02", "MAP12_5180A002", "MAP13_0B80A006", "MAP14_2300A004", "MAP15_5C207006", 
	"MAP16_45108704", "MAP17_432C9B04", "MAP18_47C2AA05", "MAP19_4400A004", "MAP20_40709607", 
	"MAP21_4980AF04", "MAP22_256EB409", "MAP23_47C0C883", "MAP24_164CB483", "MAP25_4880A004", 
	"MAP26_12E00002", "MAP27_46807802", "MAP28_45009B82", "MAP29_0E807D03", "MAP30_0E00A001", 
	"MAP31_45647802", "MAP32_0EC0FF83", 		
	// Final Doom: TNT Evilution (Wadsmoosh)
	"TN_MAP01_2596FA81", "TN_MAP02_6080AA84", "TN_MAP03_1C77F703", "TN_MAP04_29488C08", "TN_MAP05_10987803", 
	"TN_MAP06_1800FF01", "TN_MAP07_50C09604", "TN_MAP08_25807304", "TN_MAP09_4448AF0B", "TN_MAP10_116E8C05", 
	"TN_MAP11_11C86E02", "TN_MAP12_5180A002", "TN_MAP13_0B80A006", "TN_MAP14_2300A004", "TN_MAP15_5C207006", 
	"TN_MAP16_45108704", "TN_MAP17_432C9B04", "TN_MAP18_47C2AA05", "TN_MAP19_4400A004", "TN_MAP20_40709607", 
	"TN_MAP21_4980AF04", "TN_MAP22_256EB409", "TN_MAP23_47C0C883", "TN_MAP24_164CB483", "TN_MAP25_4880A004", 
	"TN_MAP26_12E00002", "TN_MAP27_46807802", "TN_MAP28_45009B82", "TN_MAP29_0E807D03", "TN_MAP30_0E00A001", 
	"TN_MAP31_45647802", "TN_MAP32_0EC0FF83", 
	// Final Doom: The Plutonia Experiment 
	"MAP01_63809B01", "MAP02_4910BE80", "MAP03_436C9D01", "MAP04_47E0AF84", "MAP05_51009B01", 
	"MAP06_0A80C886", "MAP07_2000B481", "MAP08_0900B481", "MAP09_09B99B02", "MAP10_63609603", 
	"MAP11_5180B481", "MAP12_4000A502", "MAP13_48E2A001", "MAP14_6398B483", "MAP15_7D00B993", 
	"MAP16_09009B80", "MAP17_25009B82", "MAP18_41808701", "MAP19_09909101", "MAP20_47C8B482", 
	"MAP21_7DC0A580", "MAP22_0B60A004", "MAP23_7DC0A505", "MAP24_47809B07", "MAP25_7D80B481", 
	"MAP26_57308703", "MAP27_47808F03", "MAP28_09809B04", "MAP29_43009B02", "MAP30_43C01900", 
	"MAP31_4700B481", "MAP32_43C07202",	
	// Final Doom: The Plutonia Experiment (Wadsmoosh)
	"PL_MAP01_63809B01", "PL_MAP02_4910BE80", "PL_MAP03_436C9D01", "PL_MAP04_47E0AF84", "PL_MAP05_51009B01", 
	"PL_MAP06_0A80C886", "PL_MAP07_2000B481", "PL_MAP08_0900B481", "PL_MAP09_09B99B02", "PL_MAP10_63609603", 
	"PL_MAP11_5180B481", "PL_MAP12_4000A502", "PL_MAP13_48E2A001", "PL_MAP14_6398B483", "PL_MAP15_7D00B993", 
	"PL_MAP16_09009B80", "PL_MAP17_25009B82", "PL_MAP18_41808701", "PL_MAP19_09909101", "PL_MAP20_47C8B482", 
	"PL_MAP21_7DC0A580", "PL_MAP22_0B60A004", "PL_MAP23_7DC0A505", "PL_MAP24_47809B07", "PL_MAP25_7D80B481", 
	"PL_MAP26_57308703", "PL_MAP27_47808F03", "PL_MAP28_09809B04", "PL_MAP29_43009B02", "PL_MAP30_43C01900", 
	"PL_MAP31_4700B481", "PL_MAP32_43C07202",
	// Doom II Reloaded
	"MAP20_2568B004",
	// EDayMap06 Patch
	"eday06_2D500005",
	// Thunderpeak Patch
	"MAP01_6F00E084", "MAP02_7068E102",
	// Wormwood Patch
	"MAP01_0AE00080", "MAP02_1248C004",
	// D64D2
	"MAP30_55B00001"
};

// --------------------------------------------------------------------------
//
//	Eviternity
//
// --------------------------------------------------------------------------
str EviMpHshLst[] =
{
	// Eviternity
	"MAP01_1B00B082", "MAP02_12F05001", "MAP03_13E06003", "MAP04_14D08002",
	"MAP11_1080F003", "MAP12_0140B081", "MAP13_0200C084", "MAP14_1060C884",
	"MAP15_13C08007", "MAP19_0E380084", "MAP22_0270DA03", "MAP26_7D40C087", 
	"MAP27_1200C083", "MAP28_10C0D081", "MAP29_1B204003", "MAP30_0BC00080"
};

/*
Script "E1M1_0980E083"
{
    Log(s:"this is e1m1 and I dunno how is this meant to represent a hangar but okay");
}

Script "E1M2_03609006"
{
    Log(s:"AW YEAH, THIS IS e1m2");
}
*/

str PadHex (int input)
{
	str retVal = StrParam(x:input);

	int strL = StrLen(retVal);

	if(strL > 8) {return "FFFFFFFF";}
	if(strL < 1) {return "00000000";}

	if(strL == 1) {return StrParam(s:"0000000", s:retVal);}
	if(strL == 2) {return StrParam(s:"000000", s:retVal);}
	if(strL == 3) {return StrParam(s:"00000", s:retVal);}
	if(strL == 4) {return StrParam(s:"0000", s:retVal);}
	if(strL == 5) {return StrParam(s:"000", s:retVal);}
	if(strL == 6) {return StrParam(s:"00", s:retVal);}
	if(strL == 7) {return StrParam(c:'0', s:retVal);}

	return retVal;
}

str CalcMapHash ()
{
	//Log(s:"Calculating");
	int TID = UniqueTID();
	SpawnForced("Mapspot", 0.0, 0.0, 0.0, TID);

	int secrets = GetLevelInfo(LEVELINFO_TOTAL_SECRETS) & 0x0000007F;
	int light = GetActorLightLevel(TID) & 0xFF;
	int ceilz = int((fixed)GetActorCeilingZ(TID)) & 0xFF;
	int isSky = CheckActorCeilingTexture(TID, "F_SKY1") << 7;

	str texture = GetActorFloorTexture(TID);
	int texLen = StrLen(texture);

	int sum1 = texLen;
	for(int i = 0; i < texLen; i++)
		sum1 ^= GetChar(texture, i);

	sum1 = (sum1 & 0xFF) << 24;
	int sum2 = ceilz << 16;
	int sum3 = light << 8;
	int sum4 = secrets | isSky;

	int hash = sum1 | sum2 | sum3 | sum4;

	Thing_Remove(TID);
	//Log(n:PRINTNAME_LEVEL, c:'_', s:PadHex(hash));

	return StrParam(n:PRINTNAME_LEVEL, c:'_', s:PadHex(hash));
}

Script "BD_ApplyMapPatch" OPEN
{
	// TODO: add check for BD CVAR
	// if()
	//	return;
	if(bd_disablemapenhancements)
	terminate;
	
	Delay(1);

    // TODO: early out if map doesn't follow one of the supported
    // naming conventions

	str id = CalcMapHash();
	
	if(bd_WadCheck == 5)
	{
		//Log(s:"Should be detecting Eviternity...");
		//if(IsGZDoom()) terminate;
		if(!GetPlayerAccountName(PlayerIsLoggedIn(playernumber())))
		{
			//Log(s:"GZDoom is Loaded");
			terminate;
		}
		//Log(s:"Zandronum is loaded");
		
		foreach(let str listId; EviMpHshLst)
		{
			//Log(s:"stringin");
			if(StrICmp(id, listId) == 0)
			{
				//Log(s:"Executing");
				ACS_NamedExecuteWithResult(id);
			}
		}
	}
	else //if(bd_WadCheck < 4) //Unique WAD support starts at 4.
	{
		foreach(let str listId; MapHashList)
		{
			if(StrICmp(id, listId) == 0)
			{
				ACS_NamedExecuteWithResult(id);
			}
		}
	}
}

Script "BD_CalcHashInSequence" ENTER
{
	if(!GetCVar("bd_calculatemapid"))
        terminate;

	Log(c:'"', s:CalcMapHash(), s:"\",");
	Delay(1);
	Exit_Normal(0);
}

/*Script "BD_MapEnhCompat" OPEN
{
    int LMP, len, sum, tempLMP = -1;
	
	if (!HasLumpReading()) terminate;

    do
    {
        LMP = tempLMP;
        tempLMP = ZC_LumpOpen("acs/darkdoom.o", LMP, LUMP_OPEN_FULLPATH);
        ZC_LumpClose(LMP);

    }

    LMP = ZC_LumpOpen("acs/darkdoom.o", LMP - 1, LUMP_OPEN_FULLPATH);

    if(!LMP)
        terminate;
    
    ZC_LumpClose(LMP);
}*/
